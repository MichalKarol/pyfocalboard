{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"pyfocalboard","text":""},{"location":"#pyfocalboard.api.FocalboardApi","title":"FocalboardApi","text":"<pre><code>FocalboardApi(token: str | None, server: str)\n</code></pre> Source code in <code>pyfocalboard/api.py</code> <pre><code>def __init__(self, token: str | None, server: str):\n    self._server = server\n    self._client = Session()\n    self._client.headers[\"X-Requested-With\"] = \"XMLHttpRequest\"\n    if token:\n        self._client.headers[\"Authorization\"] = \"Bearer \" + token\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.add_member","title":"add_member","text":"<pre><code>add_member(board_id: str, user_id: str, member: MemberBody | None = None) -&gt; Member\n</code></pre> <p>Adds a new member to a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-addMember</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def add_member(\n    self, board_id: str, user_id: str, member: MemberBody | None = None\n) -&gt; Member:\n    \"\"\"\n    Adds a new member to a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-addMember](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-addMember)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/members\",\n        json=dict(userID=user_id, **(member.to_dict() if member else {})),\n    )\n    data = self._handle_possible_error(response.json())\n    return Member.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.archive_board_export","title":"archive_board_export","text":"<pre><code>archive_board_export(board_id: str) -&gt; bytes\n</code></pre> <p>Exports an archive of all blocks for one boards.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def archive_board_export(self, board_id: str) -&gt; bytes:\n    \"\"\"\n    Exports an archive of all blocks for one boards.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportBoard)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/archive/export\",\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n    return response.content\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.archive_export_team","title":"archive_export_team","text":"<pre><code>archive_export_team(team_id: str) -&gt; bytes\n</code></pre> <p>Exports an archive of all blocks for one boards.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportTeam</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def archive_export_team(self, team_id: str) -&gt; bytes:\n    \"\"\"\n    Exports an archive of all blocks for one boards.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportTeam](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveExportTeam)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/archive/export\",\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n    return response.content\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.archive_import","title":"archive_import","text":"<pre><code>archive_import(team_id: str, file: bytes) -&gt; None\n</code></pre> <p>Import an archive of boards.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveImport</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def archive_import(self, team_id: str, file: bytes) -&gt; None:\n    \"\"\"\n    Import an archive of boards.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveImport](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-archiveImport)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/archive/import\",\n        files=dict(file=file),\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.client_config","title":"client_config","text":"<pre><code>client_config() -&gt; ClientConfig\n</code></pre> <p>Returns the client configuration</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getClientConfig</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def client_config(self) -&gt; ClientConfig:\n    \"\"\"\n    Returns the client configuration\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getClientConfig](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getClientConfig)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/clientConfig\")\n    data = self._handle_possible_error(response.json())\n    return ClientConfig.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.create_board","title":"create_board","text":"<pre><code>create_board(team_id: str, board: BoardBody) -&gt; Board\n</code></pre> <p>Creates a new board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def create_board(self, team_id: str, board: BoardBody) -&gt; Board:\n    \"\"\"\n    Creates a new board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards\",\n        json=dict(teamID=team_id, **board.to_dict()),\n    )\n    data = self._handle_possible_error(response.json())\n    return Board.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.create_card","title":"create_card","text":"<pre><code>create_card(board_id: str, card: CardBody | None = None, disable_notify: bool = False) -&gt; Card\n</code></pre> <p>Creates a new card for the specified board.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def create_card(\n    self, board_id: str, card: CardBody | None = None, disable_notify: bool = False\n) -&gt; Card:\n    \"\"\"\n    Creates a new card for the specified board.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/cards\",\n        json=(card.to_dict() if card else {}),\n        params=dict(disable_notify=\"true\" if disable_notify else \"false\"),\n    )\n    data = self._handle_possible_error(response.json())\n    return Card.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.create_category","title":"create_category","text":"<pre><code>create_category(team_id: str, user_id: str, category: CategoryBody) -&gt; Category\n</code></pre> <p>Create a category for boards</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCategory</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def create_category(\n    self, team_id: str, user_id: str, category: CategoryBody\n) -&gt; Category:\n    \"\"\"\n    Create a category for boards\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCategory](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createCategory)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/categories\",\n        json=dict(teamID=team_id, userID=user_id, **category.to_dict()),\n    )\n    data = self._handle_possible_error(response.json())\n    return Category.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.create_subscription","title":"create_subscription","text":"<pre><code>create_subscription(block: Block, user_id: str) -&gt; Subscription\n</code></pre> <p>Creates a subscription to a block for a user. The user will receive change notifications for the block.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createSubscription</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def create_subscription(self, block: Block, user_id: str) -&gt; Subscription:\n    \"\"\"\n    Creates a subscription to a block for a user. The user will receive change notifications for the block.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createSubscription](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-createSubscription)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/subscriptions\",\n        json=dict(\n            blockID=block.id,\n            BlockType=block.type,\n            subscriberID=user_id,\n            SubscriberType=\"user\",\n        ),\n    )\n    data = self._handle_possible_error(response.json())\n    return Subscription.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_block","title":"delete_block","text":"<pre><code>delete_block(board_id: str, block_id: str) -&gt; None\n</code></pre> <p>Deletes a block</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBlock</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_block(self, board_id: str, block_id: str) -&gt; None:\n    \"\"\"\n    Deletes a block\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBlock](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBlock)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks/{block_id}\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_board","title":"delete_board","text":"<pre><code>delete_board(board_id: str) -&gt; None\n</code></pre> <p>Removes a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_board(self, board_id: str) -&gt; None:\n    \"\"\"\n    Removes a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoard)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/boards/{board_id}\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_boards_and_blocks","title":"delete_boards_and_blocks","text":"<pre><code>delete_boards_and_blocks(board_ids: list[str], block_ids: list[str]) -&gt; None\n</code></pre> <p>Deletes boards and blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoardsAndBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_boards_and_blocks(\n    self, board_ids: list[str], block_ids: list[str]\n) -&gt; None:\n    \"\"\"\n    Deletes boards and blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoardsAndBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteBoardsAndBlocks)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/boards-and-blocks\",\n        json=dict(boards=board_ids, blocks=block_ids),\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_category","title":"delete_category","text":"<pre><code>delete_category(team_id: str, category_id: str) -&gt; None\n</code></pre> <p>Delete a category</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteCategory</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_category(self, team_id: str, category_id: str) -&gt; None:\n    \"\"\"\n    Delete a category\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteCategory](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteCategory)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/categories/{category_id}\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_member","title":"delete_member","text":"<pre><code>delete_member(board_id: str, user_id: str) -&gt; None\n</code></pre> <p>Deletes a member from a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteMember</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_member(\n    self,\n    board_id: str,\n    user_id: str,\n) -&gt; None:\n    \"\"\"\n    Deletes a member from a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteMember](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteMember)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/members/{user_id}\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.delete_subscriptions","title":"delete_subscriptions","text":"<pre><code>delete_subscriptions(block_id: str, user_id: str) -&gt; None\n</code></pre> <p>Deletes a subscription a user has for a a block. The user will no longer receive change notifications for the block.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteSubscription</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def delete_subscriptions(self, block_id: str, user_id: str) -&gt; None:\n    \"\"\"\n    Deletes a subscription a user has for a a block. The user will no longer receive change notifications for the block.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteSubscription](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-deleteSubscription)\n    \"\"\"\n    response = self._client.delete(\n        f\"{self._server}{self._API_URl}/subscriptions/{block_id}/{user_id}\"\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.duplicate_block","title":"duplicate_block","text":"<pre><code>duplicate_block(board_id: str, block_id: str) -&gt; None\n</code></pre> <p>Returns the new created blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBlock</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def duplicate_block(self, board_id: str, block_id: str) -&gt; None:\n    \"\"\"\n    Returns the new created blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBlock](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBlock)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks/{block_id}/duplicate\",\n    )\n    data = self._handle_possible_error(response.json())\n    return [Block.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.duplicate_board","title":"duplicate_board","text":"<pre><code>duplicate_board(board_id: str) -&gt; BoardAndBlocks\n</code></pre> <p>Returns the new created board and all the blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def duplicate_board(self, board_id: str) -&gt; BoardAndBlocks:\n    \"\"\"\n    Returns the new created board and all the blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-duplicateBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/duplicate\"\n    )\n    data = self._handle_possible_error(response.json())\n    return BoardAndBlocks.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_blocks","title":"get_blocks","text":"<pre><code>get_blocks(board_id: str, parent_id: str | None = None, type: str | None = None) -&gt; list[Block]\n</code></pre> <p>Returns team boards</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_blocks(\n    self, board_id: str, parent_id: str | None = None, type: str | None = None\n) -&gt; list[Block]:\n    \"\"\"\n    Returns team boards\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBlocks)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks\",\n        params={\n            \"parent_id:\": parent_id,\n            \"type\": type,\n        },\n    )\n    data = self._handle_possible_error(response.json())\n    return [Block.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_board","title":"get_board","text":"<pre><code>get_board(board_id: str) -&gt; Board\n</code></pre> <p>Returns a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_board(self, board_id: str) -&gt; Board:\n    \"\"\"\n    Returns a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoard)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/boards/{board_id}\")\n    data = self._handle_possible_error(response.json())\n    return Board.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_boards","title":"get_boards","text":"<pre><code>get_boards(team_id: str) -&gt; list[Board]\n</code></pre> <p>Returns team boards</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_boards(self, team_id: str) -&gt; list[Board]:\n    \"\"\"\n    Returns team boards\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getBoards)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/boards\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Board.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_card","title":"get_card","text":"<pre><code>get_card(card_id: str) -&gt; Card\n</code></pre> <p>Fetches the specified card.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_card(self, card_id: str) -&gt; Card:\n    \"\"\"\n    Fetches the specified card.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCard)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/cards/{card_id}\")\n    data = self._handle_possible_error(response.json())\n    return Card.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_cards","title":"get_cards","text":"<pre><code>get_cards(board_id: str) -&gt; list[Card]\n</code></pre> <p>Fetches cards for the specified board.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_cards(self, board_id: str) -&gt; list[Card]:\n    \"\"\"\n    Fetches cards for the specified board.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getCards)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/cards\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Card.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_category_boards","title":"get_category_boards","text":"<pre><code>get_category_boards(team_id: str) -&gt; list[Category]\n</code></pre> <p>Gets the user's board categories</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserCategoryBoards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_category_boards(self, team_id: str) -&gt; list[Category]:\n    \"\"\"\n    Gets the user's board categories\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserCategoryBoards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserCategoryBoards)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/categories\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Category.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_channel","title":"get_channel","text":"<pre><code>get_channel(team_id: str, channel_id: str) -&gt; Channel\n</code></pre> <p>Returns the requested channel</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getChannel</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_channel(self, team_id: str, channel_id: str) -&gt; Channel:\n    \"\"\"\n    Returns the requested channel\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getChannel](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getChannel)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/channels/{channel_id}\"\n    )\n    data = self._handle_possible_error(response.json())\n    return Channel.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_file","title":"get_file","text":"<pre><code>get_file(team_id: str, board_id: str, filename: str) -&gt; bytes\n</code></pre> <p>Returns the contents of an uploaded file</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getFile</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_file(self, team_id: str, board_id: str, filename: str) -&gt; bytes:\n    \"\"\"\n    Returns the contents of an uploaded file\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getFile](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getFile)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/files/teams/{team_id}/{board_id}/{filename}\"\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n    return response.content\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_me","title":"get_me","text":"<pre><code>get_me() -&gt; User\n</code></pre> <p>Returns the currently logged-in user</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMe</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_me(self) -&gt; User:\n    \"\"\"\n    Returns the currently logged-in user\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMe](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMe)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/users/me\")\n    data = self._handle_possible_error(response.json())\n    return User.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_members_for_board","title":"get_members_for_board","text":"<pre><code>get_members_for_board(board_id: str) -&gt; list[Member]\n</code></pre> <p>Returns the members of the board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMembersForBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_members_for_board(self, board_id: str) -&gt; list[Member]:\n    \"\"\"\n    Returns the members of the board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMembersForBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMembersForBoard)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/members\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Member.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_my_memberships","title":"get_my_memberships","text":"<pre><code>get_my_memberships() -&gt; list[Member]\n</code></pre> <p>Returns the currently users board memberships</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMyMemberships</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_my_memberships(self) -&gt; list[Member]:\n    \"\"\"\n    Returns the currently users board memberships\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMyMemberships](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getMyMemberships)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/users/me/memberships\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Member.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_sharing","title":"get_sharing","text":"<pre><code>get_sharing(board_id: str) -&gt; Sharing\n</code></pre> <p>Returns sharing information for a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSharing</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_sharing(self, board_id: str) -&gt; Sharing:\n    \"\"\"\n    Returns sharing information for a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSharing](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSharing)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/sharing\"\n    )\n    data = self._handle_possible_error(response.json())\n    return Sharing.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_statistics","title":"get_statistics","text":"<pre><code>get_statistics() -&gt; BoardsStatistics\n</code></pre> <p>Fetches the statistic of the server.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-handleStatistics</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_statistics(self) -&gt; BoardsStatistics:\n    \"\"\"\n    Fetches the statistic of the server.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-handleStatistics](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-handleStatistics)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/statistics\")\n    data = self._handle_possible_error(response.json())\n    return BoardsStatistics.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_subscriptions","title":"get_subscriptions","text":"<pre><code>get_subscriptions(subscriber_id: str) -&gt; list[Subscription]\n</code></pre> <p>Gets subscriptions for a user.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSubscriptions</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_subscriptions(self, subscriber_id: str) -&gt; list[Subscription]:\n    \"\"\"\n    Gets subscriptions for a user.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSubscriptions](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getSubscriptions)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/subscriptions/{subscriber_id}\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Subscription.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_team","title":"get_team","text":"<pre><code>get_team(team_id: str) -&gt; Team\n</code></pre> <p>Returns information of the root team</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeam</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_team(self, team_id: str) -&gt; Team:\n    \"\"\"\n    Returns information of the root team\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeam](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeam)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/teams/{team_id}\")\n    data = self._handle_possible_error(response.json())\n    return Team.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_team_users","title":"get_team_users","text":"<pre><code>get_team_users(team_id: str, search: str | None = None, exclude_bots: bool = False) -&gt; list[User]\n</code></pre> <p>Returns team users</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeamUsers</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_team_users(\n    self, team_id: str, search: str | None = None, exclude_bots: bool = False\n) -&gt; list[User]:\n    \"\"\"\n    Returns team users\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeamUsers](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeamUsers)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/users\",\n        params=dict(\n            search=search, exclude_bots=\"true\" if exclude_bots else \"false\"\n        ),\n    )\n    data = self._handle_possible_error(response.json())\n    return [User.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_teams","title":"get_teams","text":"<pre><code>get_teams() -&gt; list[Team]\n</code></pre> <p>Returns information of all the teams</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeams</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_teams(self) -&gt; list[Team]:\n    \"\"\"\n    Returns information of all the teams\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeams](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTeams)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/teams\")\n    data = self._handle_possible_error(response.json())\n    return [Team.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_templates","title":"get_templates","text":"<pre><code>get_templates(team_id: str) -&gt; list[Board]\n</code></pre> <p>Returns team templates</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTemplates</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_templates(self, team_id: str) -&gt; list[Board]:\n    \"\"\"\n    Returns team templates\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTemplates](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getTemplates)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/templates\"\n    )\n    data = self._handle_possible_error(response.json())\n    return [Board.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_user","title":"get_user","text":"<pre><code>get_user(user_id: str) -&gt; User\n</code></pre> <p>Returns a user</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUser</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_user(self, user_id: str) -&gt; User:\n    \"\"\"\n    Returns a user\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUser](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUser)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/users/{user_id}\")\n    data = self._handle_possible_error(response.json())\n    return User.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_user_config","title":"get_user_config","text":"<pre><code>get_user_config() -&gt; list[UserPreference]\n</code></pre> <p>Returns an array of user preferences</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserConfig</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_user_config(self) -&gt; list[UserPreference]:\n    \"\"\"\n    Returns an array of user preferences\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserConfig](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUserConfig)\n    \"\"\"\n    response = self._client.get(f\"{self._server}{self._API_URl}/users/me/config\")\n    data = self._handle_possible_error(response.json())\n    return [UserPreference.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.get_users","title":"get_users","text":"<pre><code>get_users(user_ids: list[str]) -&gt; list[User]\n</code></pre> <p>Returns a user list</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUsersList</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def get_users(self, user_ids: list[str]) -&gt; list[User]:\n    \"\"\"\n    Returns a user list\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUsersList](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-getUsersList)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/users\", json=user_ids\n    )\n    data = self._handle_possible_error(response.json())\n    return [User.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.insert_boards_and_blocks","title":"insert_boards_and_blocks","text":"<pre><code>insert_boards_and_blocks(boards: list[BoardBody], blocks: list[BlockBody]) -&gt; None\n</code></pre> <p>Creates new boards and blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-insertBoardsAndBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def insert_boards_and_blocks(\n    self, boards: list[BoardBody], blocks: list[BlockBody]\n) -&gt; None:\n    \"\"\"\n    Creates new boards and blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-insertBoardsAndBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-insertBoardsAndBlocks)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards-and-blocks\",\n        json=dict(\n            boards=[board.to_dict() for board in boards],\n            blocks=[\n                {\n                    \"createAt\": int(datetime.now().timestamp()),\n                    \"updateAt\": int(datetime.now().timestamp()),\n                    **block.to_dict(),\n                }\n                for block in blocks\n            ],\n        ),\n    )\n    data = self._handle_possible_error(response.json())\n    return BoardAndBlocks.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.join_board","title":"join_board","text":"<pre><code>join_board(board_id: str) -&gt; None\n</code></pre> <p>Become a member of a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-joinBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def join_board(self, board_id: str) -&gt; None:\n    \"\"\"\n    Become a member of a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-joinBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-joinBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/join\"\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.leave_board","title":"leave_board","text":"<pre><code>leave_board(board_id: str) -&gt; None\n</code></pre> <p>Remove your own membership from a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-leaveBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def leave_board(self, board_id: str) -&gt; None:\n    \"\"\"\n    Remove your own membership from a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-leaveBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-leaveBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/leave\"\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.login","title":"login","text":"<pre><code>login(auth: LoginRequest)\n</code></pre> <p>Login user</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-login</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def login(self, auth: LoginRequest):\n    \"\"\"\n    Login user\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-login](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-login)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/login\", json=auth.to_dict()\n    )\n    data = self._handle_possible_error(response.json())\n    self._client.headers[\"Authorization\"] = \"Bearer \" + data.token\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.logout","title":"logout","text":"<pre><code>logout()\n</code></pre> <p>Logout user</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-logout</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def logout(self):\n    \"\"\"\n    Logout user\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-logout](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-logout)\n    \"\"\"\n    response = self._client.post(f\"{self._server}{self._API_URl}/logout\")\n    self._handle_possible_error(response.json())\n    del self._client.headers[\"Authorization\"]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.onboard","title":"onboard","text":"<pre><code>onboard(team_id: str) -&gt; Onboarding\n</code></pre> <p>Onboards a user on Boards.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-onboard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def onboard(self, team_id: str) -&gt; Onboarding:\n    \"\"\"\n    Onboards a user on Boards.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-onboard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-onboard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/onboard\"\n    )\n    data = self._handle_possible_error(response.json())\n    return Onboarding.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.patch_block","title":"patch_block","text":"<pre><code>patch_block(board_id: str, block_id: str, block: BlockBody, disable_notify: bool = False) -&gt; None\n</code></pre> <p>Partially updates a block</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlock</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def patch_block(\n    self,\n    board_id: str,\n    block_id: str,\n    block: BlockBody,\n    disable_notify: bool = False,\n) -&gt; None:\n    \"\"\"\n    Partially updates a block\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlock](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlock)\n    \"\"\"\n    response = self._client.patch(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks/{block_id}\",\n        json=block.to_dict(),\n        params=dict(disable_notify=\"true\" if disable_notify else \"false\"),\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.patch_blocks","title":"patch_blocks","text":"<pre><code>patch_blocks(board_id: str, block_ids: list[str], blocks: list[BlockBody], disable_notify: bool = False) -&gt; None\n</code></pre> <p>Partially updates batch of blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def patch_blocks(\n    self,\n    board_id: str,\n    block_ids: list[str],\n    blocks: list[BlockBody],\n    disable_notify: bool = False,\n) -&gt; None:\n    \"\"\"\n    Partially updates batch of blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBlocks)\n    \"\"\"\n    response = self._client.patch(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks\",\n        json=dict(\n            block_ids=block_ids, block_patches=[block.to_dict() for block in blocks]\n        ),\n        params=dict(disable_notify=\"true\" if disable_notify else \"false\"),\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.patch_board","title":"patch_board","text":"<pre><code>patch_board(board_id: str, board: BoardBody) -&gt; Board\n</code></pre> <p>Partially updates a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def patch_board(self, board_id: str, board: BoardBody) -&gt; Board:\n    \"\"\"\n    Partially updates a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoard)\n    \"\"\"\n    response = self._client.patch(\n        f\"{self._server}{self._API_URl}/boards/{board_id}\",\n        json=board.to_dict(),\n    )\n    data = self._handle_possible_error(response.json())\n    return Board.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.patch_boards_and_blocks","title":"patch_boards_and_blocks","text":"<pre><code>patch_boards_and_blocks(board_ids: list[str], boards: list[BoardBody], block_ids: list[str], blocks: list[BlockBody]) -&gt; None\n</code></pre> <p>Patches a set of related boards and blocks</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoardsAndBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def patch_boards_and_blocks(\n    self,\n    board_ids: list[str],\n    boards: list[BoardBody],\n    block_ids: list[str],\n    blocks: list[BlockBody],\n) -&gt; None:\n    \"\"\"\n    Patches a set of related boards and blocks\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoardsAndBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchBoardsAndBlocks)\n    \"\"\"\n    response = self._client.patch(\n        f\"{self._server}{self._API_URl}/boards-and-blocks\",\n        json=dict(\n            boardIDs=board_ids,\n            boardPatches=[board.to_dict() for board in boards],\n            blockIDs=block_ids,\n            blockPatches=[\n                {\n                    \"createAt\": int(datetime.now().timestamp()),\n                    \"updateAt\": int(datetime.now().timestamp()),\n                    **block.to_dict(),\n                }\n                for block in blocks\n            ],\n        ),\n    )\n    data = self._handle_possible_error(response.json())\n    return BoardAndBlocks.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.patch_card","title":"patch_card","text":"<pre><code>patch_card(card_id: str, card: CardPatch | None, disable_notify: bool = False) -&gt; Card\n</code></pre> <p>Patches the specified card.</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchCard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def patch_card(\n    self, card_id: str, card: CardPatch | None, disable_notify: bool = False\n) -&gt; Card:\n    \"\"\"\n    Patches the specified card.\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchCard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-patchCard)\n    \"\"\"\n    response = self._client.patch(\n        f\"{self._server}{self._API_URl}/cards/{card_id}\",\n        json=card.to_dict(),\n        params=dict(disable_notify=\"true\" if disable_notify else \"false\"),\n    )\n    data = self._handle_possible_error(response.json())\n    return Card.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.post_sharing","title":"post_sharing","text":"<pre><code>post_sharing(board_id: str, sharing: SharingBody) -&gt; Sharing\n</code></pre> <p>Sets sharing information for a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-postSharing</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def post_sharing(self, board_id: str, sharing: SharingBody) -&gt; Sharing:\n    \"\"\"\n    Sets sharing information for a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-postSharing](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-postSharing)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/sharing\",\n        json=sharing.to_dict(),\n    )\n    data = self._handle_possible_error(response.json())\n    return Sharing.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.search_all_boards","title":"search_all_boards","text":"<pre><code>search_all_boards(query: str = '') -&gt; list[Board]\n</code></pre> <p>Returns the boards that match with a search term</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchAllBoards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def search_all_boards(self, query: str = \"\") -&gt; list[Board]:\n    \"\"\"\n    Returns the boards that match with a search term\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchAllBoards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchAllBoards)\n    \"\"\"\n\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/boards/search\", params=dict(q=query)\n    )\n    data = self._handle_possible_error(response.json())\n    return [Board.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.search_boards","title":"search_boards","text":"<pre><code>search_boards(team_id: str, query: str = '') -&gt; list[Board]\n</code></pre> <p>Returns the boards that match with a search term in the team</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchBoards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def search_boards(self, team_id: str, query: str = \"\") -&gt; list[Board]:\n    \"\"\"\n    Returns the boards that match with a search term in the team\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchBoards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchBoards)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/boards/search\",\n        params=dict(q=query),\n    )\n    data = self._handle_possible_error(response.json())\n    return [Board.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.search_linkable_boards","title":"search_linkable_boards","text":"<pre><code>search_linkable_boards(team_id: str, query: str = '') -&gt; list[Board]\n</code></pre> <p>Returns the boards that match with a search term in the team and the user has permission to manage members</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchLinkableBoards</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def search_linkable_boards(self, team_id: str, query: str = \"\") -&gt; list[Board]:\n    \"\"\"\n    Returns the boards that match with a search term in the team and the user has permission to manage members\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchLinkableBoards](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchLinkableBoards)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/boards/search/linkable\",\n        params=dict(q=query),\n    )\n    data = self._handle_possible_error(response.json())\n    return [Board.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.search_my_channels","title":"search_my_channels","text":"<pre><code>search_my_channels(team_id: str, search: str = '') -&gt; list[Channel]\n</code></pre> <p>Returns the user available channels</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchMyChannels</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def search_my_channels(self, team_id: str, search: str = \"\") -&gt; list[Channel]:\n    \"\"\"\n    Returns the user available channels\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchMyChannels](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-searchMyChannels)\n    \"\"\"\n    response = self._client.get(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/channels\",\n        params=dict(search=search),\n    )\n    data = self._handle_possible_error(response.json())\n    return [Channel.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.undelete_block","title":"undelete_block","text":"<pre><code>undelete_block(board_id: str, block_id: str) -&gt; None\n</code></pre> <p>Undeletes a block</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBlock</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def undelete_block(self, board_id: str, block_id: str) -&gt; None:\n    \"\"\"\n    Undeletes a block\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBlock](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBlock)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks/{block_id}/undelete\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.undelete_board","title":"undelete_board","text":"<pre><code>undelete_board(board_id: str) -&gt; None\n</code></pre> <p>Undeletes a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def undelete_board(self, board_id: str) -&gt; None:\n    \"\"\"\n    Undeletes a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-undeleteBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/undelete\",\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.update_blocks","title":"update_blocks","text":"<pre><code>update_blocks(board_id: str, blocks: list[Block], disable_notify: bool = False) -&gt; None\n</code></pre> <p>Insert blocks. The specified IDs will only be used to link blocks with existing ones, the rest will be replaced by server generated IDs</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateBlocks</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def update_blocks(\n    self,\n    board_id: str,\n    blocks: list[Block],\n    disable_notify: bool = False,\n) -&gt; None:\n    \"\"\"\n    Insert blocks. The specified IDs will only be used to link blocks with existing ones, the rest will be replaced by server generated IDs\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateBlocks](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateBlocks)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/blocks\",\n        json=[block.to_dict() for block in blocks],\n        params=dict(disable_notify=\"true\" if disable_notify else \"false\"),\n    )\n    self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.update_board_category","title":"update_board_category","text":"<pre><code>update_board_category(team_id: str, board_id: str, category_id: str) -&gt; None\n</code></pre> <p>Set the category of a board</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategoryBoard</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def update_board_category(\n    self, team_id: str, board_id: str, category_id: str\n) -&gt; None:\n    \"\"\"\n    Set the category of a board\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategoryBoard](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategoryBoard)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/categories/{category_id}/boards/{board_id}\",\n    )\n    if response.status_code != HTTP_CODES.OK:\n        self._handle_possible_error(response.json())\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.update_category","title":"update_category","text":"<pre><code>update_category(team_id: str, user_id: str, category_id: str, category: CategoryBody) -&gt; Category\n</code></pre> <p>Create a category for boards</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategory</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def update_category(\n    self, team_id: str, user_id: str, category_id: str, category: CategoryBody\n) -&gt; Category:\n    \"\"\"\n    Create a category for boards\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategory](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateCategory)\n    \"\"\"\n    response = self._client.put(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/categories/{category_id}\",\n        json=dict(\n            teamID=team_id, userID=user_id, id=category_id, **category.to_dict()\n        ),\n    )\n    data = self._handle_possible_error(response.json())\n    return Category.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.update_member","title":"update_member","text":"<pre><code>update_member(board_id: str, user_id: str, member: MemberBody) -&gt; Member\n</code></pre> <p>Updates a board member</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateMember</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def update_member(self, board_id: str, user_id: str, member: MemberBody) -&gt; Member:\n    \"\"\"\n    Updates a board member\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateMember](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateMember)\n    \"\"\"\n    response = self._client.put(\n        f\"{self._server}{self._API_URl}/boards/{board_id}/members/{user_id}\",\n        json=member.to_dict(),\n    )\n    data = self._handle_possible_error(response.json())\n    return Member.from_dict(data)\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.update_user_config","title":"update_user_config","text":"<pre><code>update_user_config(user_id: str, user_preference: UserPreference) -&gt; list[UserPreference]\n</code></pre> <p>Updates user config</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateUserConfig</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def update_user_config(\n    self, user_id: str, user_preference: UserPreference\n) -&gt; list[UserPreference]:\n    \"\"\"\n    Updates user config\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateUserConfig](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-updateUserConfig)\n    \"\"\"\n    response = self._client.put(\n        f\"{self._server}{self._API_URl}/users/{user_id}/config\",\n        json=user_preference.to_dict(),\n    )\n    data = self._handle_possible_error(response.json())\n    return [UserPreference.from_dict(item) for item in data]\n</code></pre>"},{"location":"#pyfocalboard.api.FocalboardApi.upload_file","title":"upload_file","text":"<pre><code>upload_file(team_id: str, board_id: str, file: bytes) -&gt; FileUploadResponse\n</code></pre> <p>Upload a binary file, attached to a root block</p> <p>https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-uploadFile</p> Source code in <code>pyfocalboard/api.py</code> <pre><code>def upload_file(\n    self, team_id: str, board_id: str, file: bytes\n) -&gt; FileUploadResponse:\n    \"\"\"\n    Upload a binary file, attached to a root block\n\n    [https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-uploadFile](https://htmlpreview.github.io/?https://github.com/mattermost/focalboard/blob/main/server/swagger/docs/html/index.html#api-Default-uploadFile)\n    \"\"\"\n    response = self._client.post(\n        f\"{self._server}{self._API_URl}/teams/{team_id}/{board_id}/files\",\n        files=dict(file=file),\n    )\n    data = self._handle_possible_error(response.json())\n    return FileUploadResponse.from_dict(data)\n</code></pre>"},{"location":"types/","title":"Types","text":""},{"location":"types/#pyfocalboard.types.ApiError","title":"ApiError","text":"<pre><code>ApiError(*, error: str, errorCode: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.ApiError.error","title":"error","text":"<pre><code>error: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.ApiError.errorCode","title":"errorCode","text":"<pre><code>errorCode: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block","title":"Block","text":"<pre><code>Block(*, type: BlockType | None = None, parentId: str | None = None, schema: int | None = None, title: str | None = None, fields: dict | None = None, boardId: str | None = None, createAt: int, updateAt: int, deleteAt: int, createdBy: str, modifiedBy: str, id: str, _other: CatchAll)\n</code></pre> <p>               Bases: <code>ResourceMetadata</code>, <code>BlockBody</code></p>"},{"location":"types/#pyfocalboard.types.Block.boardId","title":"boardId","text":"<pre><code>boardId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.createdBy","title":"createdBy","text":"<pre><code>createdBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.fields","title":"fields","text":"<pre><code>fields: dict | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.parentId","title":"parentId","text":"<pre><code>parentId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.schema","title":"schema","text":"<pre><code>schema: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.type","title":"type","text":"<pre><code>type: BlockType | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Block.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody","title":"BlockBody","text":"<pre><code>BlockBody(*, type: BlockType | None = None, parentId: str | None = None, schema: int | None = None, title: str | None = None, fields: dict | None = None, boardId: str | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.boardId","title":"boardId","text":"<pre><code>boardId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.fields","title":"fields","text":"<pre><code>fields: dict | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.parentId","title":"parentId","text":"<pre><code>parentId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.schema","title":"schema","text":"<pre><code>schema: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockBody.type","title":"type","text":"<pre><code>type: BlockType | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType","title":"BlockType","text":"<p>               Bases: <code>StrEnum</code></p>"},{"location":"types/#pyfocalboard.types.BlockType.ATTACHMENT","title":"ATTACHMENT","text":"<pre><code>ATTACHMENT = 'attachment'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.CARD","title":"CARD","text":"<pre><code>CARD = 'card'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.CHECKBOX","title":"CHECKBOX","text":"<pre><code>CHECKBOX = 'checkbox'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.COMMENT","title":"COMMENT","text":"<pre><code>COMMENT = 'comment'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.DIVIDER","title":"DIVIDER","text":"<pre><code>DIVIDER = 'divider'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.IMAGE","title":"IMAGE","text":"<pre><code>IMAGE = 'image'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.TEXT","title":"TEXT","text":"<pre><code>TEXT = 'text'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BlockType.VIEW","title":"VIEW","text":"<pre><code>VIEW = 'view'\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board","title":"Board","text":"<pre><code>Board(*, type: BoardType | None = None, channelId: str | None = None, minimumRole: str | None = None, title: str | None = None, description: str | None = None, icon: str | None = None, showDescription: bool | None = None, isTemplate: bool | None = None, templateVersion: int | None = None, properties: dict[str, str] | None = None, cardProperties: list[Field] | None = None, createAt: int, updateAt: int, deleteAt: int, createdBy: str, modifiedBy: str, id: str, teamId: str, _other: CatchAll)\n</code></pre> <p>               Bases: <code>ResourceMetadata</code>, <code>BoardBody</code></p>"},{"location":"types/#pyfocalboard.types.Board.cardProperties","title":"cardProperties","text":"<pre><code>cardProperties: list[Field] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.channelId","title":"channelId","text":"<pre><code>channelId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.createdBy","title":"createdBy","text":"<pre><code>createdBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.description","title":"description","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.icon","title":"icon","text":"<pre><code>icon: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.isTemplate","title":"isTemplate","text":"<pre><code>isTemplate: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.minimumRole","title":"minimumRole","text":"<pre><code>minimumRole: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.properties","title":"properties","text":"<pre><code>properties: dict[str, str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.showDescription","title":"showDescription","text":"<pre><code>showDescription: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.teamId","title":"teamId","text":"<pre><code>teamId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.templateVersion","title":"templateVersion","text":"<pre><code>templateVersion: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.type","title":"type","text":"<pre><code>type: BoardType | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Board.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocks","title":"BoardAndBlocks","text":"<pre><code>BoardAndBlocks(*, boards: list[Board], blocks: list[Block], _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocks.blocks","title":"blocks","text":"<pre><code>blocks: list[Block]\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocks.boards","title":"boards","text":"<pre><code>boards: list[Board]\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocksBody","title":"BoardAndBlocksBody","text":"<pre><code>BoardAndBlocksBody(*, boards: list[BoardBody], blocks: list[BlockBody], _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocksBody.blocks","title":"blocks","text":"<pre><code>blocks: list[BlockBody]\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardAndBlocksBody.boards","title":"boards","text":"<pre><code>boards: list[BoardBody]\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody","title":"BoardBody","text":"<pre><code>BoardBody(*, type: BoardType | None = None, channelId: str | None = None, minimumRole: str | None = None, title: str | None = None, description: str | None = None, icon: str | None = None, showDescription: bool | None = None, isTemplate: bool | None = None, templateVersion: int | None = None, properties: dict[str, str] | None = None, cardProperties: list[Field] | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.cardProperties","title":"cardProperties","text":"<pre><code>cardProperties: list[Field] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.channelId","title":"channelId","text":"<pre><code>channelId: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.description","title":"description","text":"<pre><code>description: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.icon","title":"icon","text":"<pre><code>icon: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.isTemplate","title":"isTemplate","text":"<pre><code>isTemplate: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.minimumRole","title":"minimumRole","text":"<pre><code>minimumRole: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.properties","title":"properties","text":"<pre><code>properties: dict[str, str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.showDescription","title":"showDescription","text":"<pre><code>showDescription: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.templateVersion","title":"templateVersion","text":"<pre><code>templateVersion: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardBody.type","title":"type","text":"<pre><code>type: BoardType | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardType","title":"BoardType","text":"<p>               Bases: <code>StrEnum</code></p>"},{"location":"types/#pyfocalboard.types.BoardType.Open","title":"Open","text":"<pre><code>Open = 'O'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardType.Private","title":"Private","text":"<pre><code>Private = 'P'\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardsStatistics","title":"BoardsStatistics","text":"<pre><code>BoardsStatistics(*, board_count: int, card_count: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardsStatistics.board_count","title":"board_count","text":"<pre><code>board_count: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.BoardsStatistics.card_count","title":"card_count","text":"<pre><code>card_count: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card","title":"Card","text":"<pre><code>Card(*, title: str | None = None, contentOrder: list[str] | None = None, icon: str | None = None, isTemplate: bool | None = None, properties: dict[str, Any] | None = None, createAt: int, updateAt: int, deleteAt: int, createdBy: str, modifiedBy: str, id: str, boardId: str, _other: CatchAll)\n</code></pre> <p>               Bases: <code>ResourceMetadata</code>, <code>CardBody</code></p>"},{"location":"types/#pyfocalboard.types.Card.boardId","title":"boardId","text":"<pre><code>boardId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.contentOrder","title":"contentOrder","text":"<pre><code>contentOrder: list[str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.createdBy","title":"createdBy","text":"<pre><code>createdBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.icon","title":"icon","text":"<pre><code>icon: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.isTemplate","title":"isTemplate","text":"<pre><code>isTemplate: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.properties","title":"properties","text":"<pre><code>properties: dict[str, Any] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Card.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody","title":"CardBody","text":"<pre><code>CardBody(*, title: str | None = None, contentOrder: list[str] | None = None, icon: str | None = None, isTemplate: bool | None = None, properties: dict[str, Any] | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody.contentOrder","title":"contentOrder","text":"<pre><code>contentOrder: list[str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody.icon","title":"icon","text":"<pre><code>icon: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody.isTemplate","title":"isTemplate","text":"<pre><code>isTemplate: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody.properties","title":"properties","text":"<pre><code>properties: dict[str, Any] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardBody.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardPatch","title":"CardPatch","text":"<pre><code>CardPatch(*, title: str | None = None, contentOrder: list[str] | None = None, icon: str | None = None, updatedProperties: dict[str, Any] | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardPatch.contentOrder","title":"contentOrder","text":"<pre><code>contentOrder: list[str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardPatch.icon","title":"icon","text":"<pre><code>icon: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardPatch.title","title":"title","text":"<pre><code>title: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CardPatch.updatedProperties","title":"updatedProperties","text":"<pre><code>updatedProperties: dict[str, Any] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category","title":"Category","text":"<pre><code>Category(*, name: str, collapsed: bool | None = None, sorting: str | None = None, type: str | None = None, boardMetadata: list[Metadata] | None = None, sortOrder: int | None = None, createAt: int, updateAt: int, deleteAt: int, id: str, userID: str, teamID: str, _other: CatchAll)\n</code></pre> <p>               Bases: <code>ResourceMetadataTime</code>, <code>CategoryBody</code></p>"},{"location":"types/#pyfocalboard.types.Category.boardMetadata","title":"boardMetadata","text":"<pre><code>boardMetadata: list[Metadata] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.collapsed","title":"collapsed","text":"<pre><code>collapsed: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.sortOrder","title":"sortOrder","text":"<pre><code>sortOrder: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.sorting","title":"sorting","text":"<pre><code>sorting: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.teamID","title":"teamID","text":"<pre><code>teamID: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Category.userID","title":"userID","text":"<pre><code>userID: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody","title":"CategoryBody","text":"<pre><code>CategoryBody(*, name: str, collapsed: bool | None = None, sorting: str | None = None, type: str | None = None, boardMetadata: list[Metadata] | None = None, sortOrder: int | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.boardMetadata","title":"boardMetadata","text":"<pre><code>boardMetadata: list[Metadata] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.collapsed","title":"collapsed","text":"<pre><code>collapsed: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.sortOrder","title":"sortOrder","text":"<pre><code>sortOrder: int | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.sorting","title":"sorting","text":"<pre><code>sorting: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.CategoryBody.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel","title":"Channel","text":"<pre><code>Channel(*, id: str, create_at: int, update_at: int, delete_at: int, team_id: str, type: ChannelType, display_name: str, name: str, header: str, purpose: str, last_post_at: int, total_msg_count: int, extra_update_at: int, creator_id: str, scheme_id: str | None, props: dict | None, group_constrained: bool | None, shared: bool | None, total_msg_count_root: int, policy_id: str | None, last_root_post_at: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.create_at","title":"create_at","text":"<pre><code>create_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.creator_id","title":"creator_id","text":"<pre><code>creator_id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.delete_at","title":"delete_at","text":"<pre><code>delete_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.display_name","title":"display_name","text":"<pre><code>display_name: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.extra_update_at","title":"extra_update_at","text":"<pre><code>extra_update_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.group_constrained","title":"group_constrained","text":"<pre><code>group_constrained: bool | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.header","title":"header","text":"<pre><code>header: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.last_post_at","title":"last_post_at","text":"<pre><code>last_post_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.last_root_post_at","title":"last_root_post_at","text":"<pre><code>last_root_post_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.policy_id","title":"policy_id","text":"<pre><code>policy_id: str | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.props","title":"props","text":"<pre><code>props: dict | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.purpose","title":"purpose","text":"<pre><code>purpose: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.scheme_id","title":"scheme_id","text":"<pre><code>scheme_id: str | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.shared","title":"shared","text":"<pre><code>shared: bool | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.team_id","title":"team_id","text":"<pre><code>team_id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.total_msg_count","title":"total_msg_count","text":"<pre><code>total_msg_count: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.total_msg_count_root","title":"total_msg_count_root","text":"<pre><code>total_msg_count_root: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.type","title":"type","text":"<pre><code>type: ChannelType\n</code></pre>"},{"location":"types/#pyfocalboard.types.Channel.update_at","title":"update_at","text":"<pre><code>update_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ChannelType","title":"ChannelType","text":"<p>               Bases: <code>StrEnum</code></p>"},{"location":"types/#pyfocalboard.types.ChannelType.Open","title":"Open","text":"<pre><code>Open = 'O'\n</code></pre>"},{"location":"types/#pyfocalboard.types.ChannelType.Private","title":"Private","text":"<pre><code>Private = 'P'\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig","title":"ClientConfig","text":"<pre><code>ClientConfig(*, telemetry: bool, telemetryid: str, enablePublicSharedBoards: bool, teammateNameDisplay: bool, featureFlags: dict[str, Literal['true'] | Literal['false']], maxFileSize: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.enablePublicSharedBoards","title":"enablePublicSharedBoards","text":"<pre><code>enablePublicSharedBoards: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.featureFlags","title":"featureFlags","text":"<pre><code>featureFlags: dict[str, Literal['true'] | Literal['false']]\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.maxFileSize","title":"maxFileSize","text":"<pre><code>maxFileSize: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.teammateNameDisplay","title":"teammateNameDisplay","text":"<pre><code>teammateNameDisplay: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.telemetry","title":"telemetry","text":"<pre><code>telemetry: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.ClientConfig.telemetryid","title":"telemetryid","text":"<pre><code>telemetryid: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Field","title":"Field","text":"<pre><code>Field(*, id: str | None = None, name: str, options: list[FieldOption] | None = None, type: str | None = None, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Field.id","title":"id","text":"<pre><code>id: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Field.name","title":"name","text":"<pre><code>name: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Field.options","title":"options","text":"<pre><code>options: list[FieldOption] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Field.type","title":"type","text":"<pre><code>type: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.FieldOption","title":"FieldOption","text":"<pre><code>FieldOption(*, color: str, id: str, value: str, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.FieldOption.color","title":"color","text":"<pre><code>color: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.FieldOption.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.FieldOption.value","title":"value","text":"<pre><code>value: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.FileUploadResponse","title":"FileUploadResponse","text":"<pre><code>FileUploadResponse(*, fileId: str, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.FileUploadResponse.fileId","title":"fileId","text":"<pre><code>fileId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.HTTP_CODES","title":"HTTP_CODES","text":""},{"location":"types/#pyfocalboard.types.HTTP_CODES.OK","title":"OK","text":"<pre><code>OK = 200\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest","title":"LoginRequest","text":"<pre><code>LoginRequest(*, type: Literal['normal'] = 'normal', username: str | None = None, email: str | None = None, password: str, mfa_token: str | None = None, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest.email","title":"email","text":"<pre><code>email: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest.mfa_token","title":"mfa_token","text":"<pre><code>mfa_token: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest.password","title":"password","text":"<pre><code>password: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest.type","title":"type","text":"<pre><code>type: Literal['normal'] = 'normal'\n</code></pre>"},{"location":"types/#pyfocalboard.types.LoginRequest.username","title":"username","text":"<pre><code>username: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member","title":"Member","text":"<pre><code>Member(*, schemeAdmin: bool | None = None, schemeEditor: bool | None = None, schemeCommenter: bool | None = None, schemeViewer: bool | None = None, boardId: str, userId: str, roles: str, minimumRole: str, synthetic: bool, _other: CatchAll)\n</code></pre> <p>               Bases: <code>MemberBody</code></p>"},{"location":"types/#pyfocalboard.types.Member.boardId","title":"boardId","text":"<pre><code>boardId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.minimumRole","title":"minimumRole","text":"<pre><code>minimumRole: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.roles","title":"roles","text":"<pre><code>roles: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.schemeAdmin","title":"schemeAdmin","text":"<pre><code>schemeAdmin: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.schemeCommenter","title":"schemeCommenter","text":"<pre><code>schemeCommenter: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.schemeEditor","title":"schemeEditor","text":"<pre><code>schemeEditor: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.schemeViewer","title":"schemeViewer","text":"<pre><code>schemeViewer: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.synthetic","title":"synthetic","text":"<pre><code>synthetic: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.Member.userId","title":"userId","text":"<pre><code>userId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.MemberBody","title":"MemberBody","text":"<pre><code>MemberBody(*, schemeAdmin: bool | None = None, schemeEditor: bool | None = None, schemeCommenter: bool | None = None, schemeViewer: bool | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.MemberBody.schemeAdmin","title":"schemeAdmin","text":"<pre><code>schemeAdmin: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.MemberBody.schemeCommenter","title":"schemeCommenter","text":"<pre><code>schemeCommenter: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.MemberBody.schemeEditor","title":"schemeEditor","text":"<pre><code>schemeEditor: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.MemberBody.schemeViewer","title":"schemeViewer","text":"<pre><code>schemeViewer: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Metadata","title":"Metadata","text":"<pre><code>Metadata(*, boardID: str, hidden: bool, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Metadata.boardID","title":"boardID","text":"<pre><code>boardID: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Metadata.hidden","title":"hidden","text":"<pre><code>hidden: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.Onboarding","title":"Onboarding","text":"<pre><code>Onboarding(*, teamID: str, boardID: str, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Onboarding.boardID","title":"boardID","text":"<pre><code>boardID: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Onboarding.teamID","title":"teamID","text":"<pre><code>teamID: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadata","title":"ResourceMetadata","text":"<pre><code>ResourceMetadata(*, createAt: int, updateAt: int, deleteAt: int, createdBy: str, modifiedBy: str)\n</code></pre> <p>               Bases: <code>ResourceMetadataUsers</code>, <code>ResourceMetadataTime</code></p>"},{"location":"types/#pyfocalboard.types.ResourceMetadata.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadata.createdBy","title":"createdBy","text":"<pre><code>createdBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadata.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadata.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadata.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataTime","title":"ResourceMetadataTime","text":"<pre><code>ResourceMetadataTime(*, createAt: int, updateAt: int, deleteAt: int)\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataTime.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataTime.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataTime.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataUsers","title":"ResourceMetadataUsers","text":"<pre><code>ResourceMetadataUsers(*, createdBy: str, modifiedBy: str)\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataUsers.createdBy","title":"createdBy","text":"<pre><code>createdBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.ResourceMetadataUsers.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Sharing","title":"Sharing","text":"<pre><code>Sharing(*, enabled: bool, token: str, id: str, modifiedBy: str, update_at: int, _other: CatchAll)\n</code></pre> <p>               Bases: <code>SharingBody</code></p>"},{"location":"types/#pyfocalboard.types.Sharing.enabled","title":"enabled","text":"<pre><code>enabled: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.Sharing.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Sharing.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Sharing.token","title":"token","text":"<pre><code>token: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Sharing.update_at","title":"update_at","text":"<pre><code>update_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.SharingBody","title":"SharingBody","text":"<pre><code>SharingBody(*, enabled: bool | None = None, token: str | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.SharingBody.enabled","title":"enabled","text":"<pre><code>enabled: bool | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.SharingBody.token","title":"token","text":"<pre><code>token: str | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.SubscriberType","title":"SubscriberType","text":"<p>               Bases: <code>StrEnum</code></p>"},{"location":"types/#pyfocalboard.types.SubscriberType.Channel","title":"Channel","text":"<pre><code>Channel = 'channel'\n</code></pre>"},{"location":"types/#pyfocalboard.types.SubscriberType.User","title":"User","text":"<pre><code>User = 'user'\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription","title":"Subscription","text":"<pre><code>Subscription(*, blockType: str, blockId: str, subscriberType: SubscriberType, subscriberId: str, notifiedAt: int, createAt: int, deleteAt: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.blockId","title":"blockId","text":"<pre><code>blockId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.blockType","title":"blockType","text":"<pre><code>blockType: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.createAt","title":"createAt","text":"<pre><code>createAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.deleteAt","title":"deleteAt","text":"<pre><code>deleteAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.notifiedAt","title":"notifiedAt","text":"<pre><code>notifiedAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.subscriberId","title":"subscriberId","text":"<pre><code>subscriberId: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Subscription.subscriberType","title":"subscriberType","text":"<pre><code>subscriberType: SubscriberType\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team","title":"Team","text":"<pre><code>Team(*, id: str, title: str, signupToken: str, settings: Any | None, modifiedBy: str, updateAt: int, _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.modifiedBy","title":"modifiedBy","text":"<pre><code>modifiedBy: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.settings","title":"settings","text":"<pre><code>settings: Any | None\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.signupToken","title":"signupToken","text":"<pre><code>signupToken: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.title","title":"title","text":"<pre><code>title: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.Team.updateAt","title":"updateAt","text":"<pre><code>updateAt: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.User","title":"User","text":"<pre><code>User(*, id: str, username: str, nickname: str, firstname: str, lastname: str, create_at: int, update_at: int, delete_at: int, is_bot: bool, is_guest: bool, roles: str, _other: CatchAll, permissions: list[str] | None = None)\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.create_at","title":"create_at","text":"<pre><code>create_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.delete_at","title":"delete_at","text":"<pre><code>delete_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.firstname","title":"firstname","text":"<pre><code>firstname: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.id","title":"id","text":"<pre><code>id: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.is_bot","title":"is_bot","text":"<pre><code>is_bot: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.is_guest","title":"is_guest","text":"<pre><code>is_guest: bool\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.lastname","title":"lastname","text":"<pre><code>lastname: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.nickname","title":"nickname","text":"<pre><code>nickname: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.permissions","title":"permissions","text":"<pre><code>permissions: list[str] | None = None\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.roles","title":"roles","text":"<pre><code>roles: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.update_at","title":"update_at","text":"<pre><code>update_at: int\n</code></pre>"},{"location":"types/#pyfocalboard.types.User.username","title":"username","text":"<pre><code>username: str\n</code></pre>"},{"location":"types/#pyfocalboard.types.UserPreference","title":"UserPreference","text":"<pre><code>UserPreference(*, updatedFields: dict[str, str], deletedFields: list[str], _other: CatchAll)\n</code></pre>"},{"location":"types/#pyfocalboard.types.UserPreference.deletedFields","title":"deletedFields","text":"<pre><code>deletedFields: list[str]\n</code></pre>"},{"location":"types/#pyfocalboard.types.UserPreference.updatedFields","title":"updatedFields","text":"<pre><code>updatedFields: dict[str, str]\n</code></pre>"}]}